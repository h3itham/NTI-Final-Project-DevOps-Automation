---
- name: Install Jenkins, kubectl, and Docker
  hosts: jenkins
  become: yes
  gather_facts: no
  
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
# INSTALLING JENKINS 
    - name: Create Jenkins user
      user:
        name: jenkins
        state: present
        shell: /bin/bash

    - name: Add Jenkins user to sudo group
      user:
        name: jenkins
        groups: sudo
        append: yes
    - name: Add jenkins user to sudoers file
      lineinfile:
        dest: /etc/sudoers
        line: "jenkins ALL=(ALL:ALL) NOPASSWD: ALL"
        validate: 'visudo -cf %s'

    - name: Replace %sudo line in sudoers file
      lineinfile:
        dest: /etc/sudoers
        regexp: '^%sudo\s+'
        line: '%sudo ALL=(ALL:ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Install OpenJDK 11
      apt:
        name: openjdk-11-jdk
        state: present

    - name: Add Jenkins repository key
      shell: "wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -"

    - name: Add Jenkins repository
      shell: "sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'"

    - name: Add Jenkins repository key (alternative method)
      shell: "sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5BA31D57EF5975CA"

    - name: Update apt cache after adding Jenkins repository
      apt:
        update_cache: yes

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present
        
# INSTALLING AWS CLI TO PROVIDE ACCESS TO MY AWS ACCOUNT 

    - name: Download AWS CLI v2 zip file
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscliv2.zip"

    - name: Ensure /tmp/aws directory exists
      file:
        path: "/tmp/aws"
        state: directory
    - name: Install unzip command
      apt:
        name: unzip
        state: present

    - name: Unzip AWS CLI v2
      unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp/aws"
        remote_src: yes

    - name: Run AWS CLI v2 installer
      command: sudo /tmp/aws/aws/install




# COPY AWS CREDENTIAL FROM LOCAL HOST TO JENKINS SERVER
    - name: Create .aws directory if it doesn't exist
      ansible.builtin.file:
        path: /var/jenkins_home/.aws
        state: directory

    - name: Copy credentials file
      ansible.builtin.copy:
        src: /home/haitham/.aws/credentials
        dest: /var/jenkins_home/.aws/credentials

# INSTALLING KUBECTL TO CONTROLL EKS  
    - name: Download kubectl binary
      shell: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      args:
        executable: /bin/bash

    - name: Make kubectl binary executable
      shell: |
        chmod +x ./kubectl
      args:
        executable: /bin/bash

    - name: Move kubectl binary to /usr/local/bin
      shell: |
        sudo mv ./kubectl /usr/local/bin/kubectl
      args:
        executable: /bin/bash

# INSTALLING DOCKER AND DOCKER COMPOSE 
    - name: Install Docker dependencies
      apt:
        name:
          - ca-certificates
          - curl
        state: present

    - name: Add Docker's official GPG key
      shell: |
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

    - name: Add Docker repository to Apt sources
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        executable: /bin/bash

    - name: Update apt cache after adding Docker repository
      apt:
        update_cache: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
    - name: Add jenkins user to docker group
      user:
        name: jenkins
        groups: docker
        append: yes
    - name: restart Jenkins 
      service:
        name: jenkins
        state: restarted

# ECHO READ INITIALADMINPASSWORD FILE CONTENT IN TERMINAL SCREEN 
    - name: Read initialAdminPassword file content
      slurp:
        src: /var/lib/jenkins/secrets/initialAdminPassword
      register: admin_password_content

    - name: Display initialAdminPassword file content
      debug:
        msg: "{{ admin_password_content.content | b64decode }}"